openapi: 3.0.1
info:
  title: 'Standard API Framework: Kafka REST Proxy API'
  version: 0.3.4
  contact:
    email: support@myecohub.ch
    name: EcoHub AG
    url: 'https://www.myecohub.ch'
  description: >
    The SAF Kafka REST Proxy provides a RESTful interface to the Kafka cluster, making it easy to produce and consume 
    messages.
    
    ## Security

    All endpoints are protected and a TechUser certificate (mTLS) or 
    bearer token must be provided. The certificate or oAuth2 credentials can be acquired using 
    the /techUserEnrolment endpoint of the general api.
    
    ## Changelog
    
    ### Version 0.3.4
      - Adjusted type of the key property of the response when consuming messages
    
    ### Version 0.3.3
      - Enhanced documentation
    
    ### Version 0.3.2
      - Fixed schemaVersionId header value
      - Enhanced documentation
    
    ### Version 0.3.1
      - Fixing content type definitions
      - Added SAFErrorEventType and OfferNLPIErrorEventType as valid types to POST to /in
      - Updated documentation (descriptions and examples). 
      - EventDataType
        - Prohibit additional properties
      - SAFErrorEventType
        - Prohibit additional properties
      - UserAgentType
        - Prohibit additional properties       

    ### Version 0.3.0 (20.08.2024)
    - Initial public release
servers:
  - url: 'https://services.test-myecohub.ch/saf'
  - url: 'https://services.myecohub.ch/saf'
paths:
  /in:
    post:
      tags:
        - Offer NLPI
      summary: Post an offer NLPI event to the SAF Message Broker
      description: Post an offer NLPI event to the SAF Message Broker
      operationId: post-eh-saf-in
      parameters:
        - name: schemaVersionId
          in: header
          description: The id of the schema which is used to serialize the event value
          schema:
            type: integer
            enum: [ 100024 ]
          required: true
        - name: keySchemaVersionId
          in: header
          description: The id of the schema which is used to serialize the event key
          schema:
            type: integer
            enum: [ 100020 ]
          required: true
        - name: Content-Type
          in: header
          required: true
          schema:
            enum:
              - application/json
            type: string
            default: application/json
      requestBody:
        description: Offer NLPI event to SAF Message Broker.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SAFEventType'
                - $ref: '#/components/schemas/SAFInquiryEventType'
                - $ref: '#/components/schemas/SAFErrorEventType'
                - $ref: '#/components/schemas/OfferNLPIErrorEventType'
            examples:
              offerRequestExample:
                summary: Example of an offerRequest event, initiated by an broker
                value:
                  id: 044d2e50-12d6-43e4-bb1b-7b54841c9c82
                  source: http://www.myecohub.ch/ecoHub-mock-broker-producer1
                  specversion: '1.0'
                  type: data
                  datacontenttype: application/json
                  dataschema: https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiRequestDataType.json
                  subject: offer nlpi request
                  time: '2023-08-17T14:15:22.000Z'
                  licenceKey: REcxZEVMZWV1UXFwOUZwaz...
                  userAgent:
                    name: BS1
                    version: '1.0'
                  eventReceiver:
                    category: insurer
                    id: IDP1234567
                  eventSender:
                    category: broker
                    id: IDP7654321
                  data:
                    payload: V2UgZGlkbid0IGluY2x1ZGUgdGhlIGZ1bGwgcGF5bG9hZCBoZXJlIGZvciBicmV2aXR5LiBJZiBjb3Vyc2UsIGluIHRoZSByZWFsIHdvcmxkLCB0aGlzIHBheWxvYWQgd291bGQgYmUgaW52YWxpZCBvZiBjb3Vyc2UsIGFzIGl0IGRvZXMgbm90IGNvbXBseSB3aXRoIHRoZSBPZmZlciBOTFBJIHNjaGVtYS4gQnJvd255IHBvaW50cyB0byB5b3UgZm9yIGFjdHVhbGx5IGRlY29kaW5nIHRoZSBleGFtcGxlIDsp
                    payloadSignature: MEYCIQD76gKbAynmvE5Ndq+Tnnf/aBziZlryXkP
                    links:
                      - href: 7F8C+RQDyYAIhAIjt+X0BXF0sWZYQUhzQaVElQptMEZjZiMVcXwUeL9ZJ
                        rel: offer-nlpi
                        description: Pdf file that contains additional informations for the offer.
                    encryptionKey: urpx9D/0MwvQoCz3nNcQyMpEh2VEW6X7TiMmIfH...
                    publicKeyVersion: '1.1'
                    signatureKeyVersion: '1.3'
                  processId: ff9275bf-5b35-492e-bdd2-c217e151d335
                  processName: offer.nlpi
                  processStatus: active
                  subProcessName: request
                  subProcessStatus: Created
              offerRequestReceivedExample:
                summary: Example of an offerRequest received event, sent by the insurer
                value:
                  id: 3e921406-ee31-42e9-9a17-14c9e42cae21
                  source: http://www.myecohub.ch/ecoHub-mock-insurer-producer1
                  specversion: '1.0'
                  type: data
                  subject: offer nlpi request received
                  time: '2023-08-17T14:15:22.000Z'
                  licenceKey: 8985+9403*jgfksld94&%fjd
                  userAgent:
                    name: Insurer backoffice system 1
                    version: '1.0'
                  eventReceiver:
                    category: broker
                    id: IDP7654321
                  eventSender:
                    category: insurer
                    id: IDP1234567
                  processId: ff9275bf-5b35-492e-bdd2-c217e151d335
                  processName: offer.nlpi
                  subProcessName: request
                  processStatus: active
                  subProcessStatus: Received
              offerExample:
                summary: Example of an offer event, sent by the insurer to the broker
                value:
                  id: d1ebd951-e44e-4464-939e-bd6f4c8d1d8e
                  source: http://www.myecohub.ch/ecoHub-mock-insurer-producer1
                  specversion: '1.0'
                  type: data
                  datacontenttype: application/json
                  dataschema: https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiDataType.json
                  subject: offer
                  time: '2023-08-17T14:15:22.000Z'
                  licenceKey: 8985+9403*jgfksld94&%fjd
                  userAgent:
                    name: Insurer backoffice system 1
                    version: '1.0'
                  eventSender:
                    category: insurer
                    id: IDP1234567
                  eventReceiver:
                    category: broker
                    id: IDP7654321
                  data:
                    payload: V2UgZGlkbid0IGluY2x1ZGUgdGhlIGZ1bGwgcGF5bG9hZCBoZXJlIGZvciBicmV2aXR5LiBJZiBjb3Vyc2UsIGluIHRoZSByZWFsIHdvcmxkLCB0aGlzIHBheWxvYWQgd291bGQgYmUgaW52YWxpZCBvZiBjb3Vyc2UsIGFzIGl0IGRvZXMgbm90IGNvbXBseSB3aXRoIHRoZSBPZmZlciBOTFBJIHNjaGVtYS4gQnJvd255IHBvaW50cyB0byB5b3UgZm9yIGFjdHVhbGx5IGRlY29kaW5nIHRoZSBleGFtcGxlIDsp
                    payloadSignature: MEYCIQD76gKbAynmvE5Ndq+Tnnf/aBziZlryXkP
                    links:
                      - href: 0BXF0sWZYQUhzQaVElQptMEZjZiMVcXwUeL9ZJ
                        rel: offer-nlpi
                        description: Pdf file that contains additional informations for the offer.
                    encryptionKey: mfkaclou7z84z
                    publicKeyVersion: '1.0'
                    signatureKeyVersion: '1.1'
                  processId: ff9275bf-5b35-492e-bdd2-c217e151d335
                  processName: offer.nlpi
                  subProcessName: offer
                  processStatus: active
                  subProcessStatus: Created
              offerReceivedExample:
                summary: Example of an offer received event, sent by the broker
                value:
                  id: 1aa99947-59ee-4b75-86b2-33618d34dd32
                  source: http://www.myecohub.ch/ecoHub-mock-broker-producer1
                  specversion: '1.0'
                  type: data
                  subject: offer nlpi offer received
                  time: '2023-08-17T14:15:22.000Z'
                  licenceKey: REcxZEVMZWV1UXFwOUZwaz...
                  userAgent:
                    name: BS1
                    version: '1.0'
                  eventReceiver:
                    category: insurer
                    id: IDP1234567
                  eventSender:
                    category: broker
                    id: IDP7654321
                  processId: ff9275bf-5b35-492e-bdd2-c217e151d335
                  processName: offer.nlpi
                  processStatus: active
                  subProcessName: offer
                  subProcessStatus: Received
              offerFeedbackExample:
                summary: Example of an offer feedback event, sent by the broker to the insurer
                value:
                  id: 1aa99947-59ee-4b75-86b2-33618d34dd32
                  source: http://www.myecohub.ch/ecoHub-mock-broker-producer1
                  specversion: '1.0'
                  type: data
                  datacontenttype: application/json
                  dataschema: https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiFeedbackDataType.json
                  subject: offer feedback
                  time: '2023-08-17T14:15:22.000Z'
                  licenceKey: REcxZEVMZWV1UXFwOUZwaz...
                  userAgent:
                    name: BS1
                    version: '1.0'
                  eventReceiver:
                    category: insurer
                    id: IDP1234567
                  eventSender:
                    category: broker
                    id: IDP7654321
                  data:
                    payload: V2UgZGlkbid0IGluY2x1ZGUgdGhlIGZ1bGwgcGF5bG9hZCBoZXJlIGZvciBicmV2aXR5LiBJZiBjb3Vyc2UsIGluIHRoZSByZWFsIHdvcmxkLCB0aGlzIHBheWxvYWQgd291bGQgYmUgaW52YWxpZCBvZiBjb3Vyc2UsIGFzIGl0IGRvZXMgbm90IGNvbXBseSB3aXRoIHRoZSBPZmZlciBOTFBJIHNjaGVtYS4gQnJvd255IHBvaW50cyB0byB5b3UgZm9yIGFjdHVhbGx5IGRlY29kaW5nIHRoZSBleGFtcGxlIDsp
                    payloadSignature: MEYCIQD76gKbAynmvE5Ndq+Tnnf/aBziZlryXkP
                    links:
                      - href: 7F8C+RQDyYAIhAIjt+X0BXF0sWZYQUhzQaVElQptMEZjZiMVcXwUeL9ZJ
                        rel: offer-nlpi
                        description: Pdf file that contains additional informations for the offer.
                    encryptionKey: urpx9D/0MwvQoCz3nNcQyMpEh2VEW6X7TiMmIfH...
                    publicKeyVersion: '1.1'
                    signatureKeyVersion: '1.3'
                  processId: ff9275bf-5b35-492e-bdd2-c217e151d335
                  processName: offer.nlpi
                  processStatus: active
                  subProcessName: feedback
                  subProcessStatus: Created
              offerFeedbackReceivedExample:
                summary: Example of an offer feedback received event, sent by the insurer
                value:
                  id: 5df58bad-960c-4752-81f7-3a2721493b2c
                  source: http://www.myecohub.ch/ecoHub-mock-insurer-producer1
                  specversion: '1.0'
                  type: data
                  subject: offer nlpi feedback received
                  time: '2023-08-17T14:15:22.000Z'
                  licenceKey: 8985+9403*jgfksld94&%fjd
                  userAgent:
                    name: Insurer backoffice system 1
                    version: '1.0'
                  eventReceiver:
                    category: broker
                    id: IDP7654321
                  eventSender:
                    category: insurer
                    id: IDP1234567
                  processId: ff9275bf-5b35-492e-bdd2-c217e151d335
                  processName: offer.nlpi
                  subProcessName: feedback
                  processStatus: active
                  subProcessStatus: Received
              offerConclusionDecisionExample:
                summary: Example of an offer conclusion decision event, sent by the insurer to the
                  broker
                value:
                  id: 53198975-f2ed-48d7-ae5d-0ba5f8b1e95e
                  source: http://www.myecohub.ch/ecoHub-mock-insurer-producer1
                  specversion: '1.0'
                  type: data
                  datacontenttype: application/json
                  dataschema: https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiConclusionDecisionDataType.json
                  subject: offer conclusion decision
                  time: '2023-08-17T14:15:22.000Z'
                  licenceKey: 8985+9403*jgfksld94&%fjd
                  userAgent:
                    name: Insurer backoffice system 1
                    version: '1.0'
                  eventSender:
                    category: insurer
                    id: IDP1234567
                  eventReceiver:
                    category: broker
                    id: IDP7654321
                  data:
                    payload: V2UgZGlkbid0IGluY2x1ZGUgdGhlIGZ1bGwgcGF5bG9hZCBoZXJlIGZvciBicmV2aXR5LiBJZiBjb3Vyc2UsIGluIHRoZSByZWFsIHdvcmxkLCB0aGlzIHBheWxvYWQgd291bGQgYmUgaW52YWxpZCBvZiBjb3Vyc2UsIGFzIGl0IGRvZXMgbm90IGNvbXBseSB3aXRoIHRoZSBPZmZlciBOTFBJIHNjaGVtYS4gQnJvd255IHBvaW50cyB0byB5b3UgZm9yIGFjdHVhbGx5IGRlY29kaW5nIHRoZSBleGFtcGxlIDsp
                    payloadSignature: MEYCIQD76gKbAynmvE5Ndq+Tnnf/aBziZlryXkP
                    encryptionKey: mfkaclou7z84z
                    publicKeyVersion: '1.0'
                    signatureKeyVersion: '1.1'
                  processId: ff9275bf-5b35-492e-bdd2-c217e151d335
                  processName: offer.nlpi
                  subProcessName: conclusionDecision
                  processStatus: active
                  subProcessStatus: Created
              offerConclusionDecisionReceivedExample:
                summary: Example of an offer conclusion decision received event, sent by the broker
                value:
                  id: 1607aa76-4de4-417f-9e88-88bbb4b62f34
                  source: http://www.myecohub.ch/ecoHub-mock-broker-producer1
                  specversion: '1.0'
                  type: data
                  subject: offer nlpi conclusionDecision received
                  time: '2023-08-17T14:15:22.000Z'
                  licenceKey: REcxZEVMZWV1UXFwOUZwaz...
                  userAgent:
                    name: BS1
                    version: '1.0'
                  eventReceiver:
                    category: insurer
                    id: IDP1234567
                  eventSender:
                    category: broker
                    id: IDP7654321
                  processId: ff9275bf-5b35-492e-bdd2-c217e151d335
                  processName: offer.nlpi
                  processStatus: closed
                  subProcessName: conclusionDecision
                  subProcessStatus: Received
      responses:
        '200':
          description: Returns EventResponseType
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponseType'
        '400':
          description: Bad request. Input data is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseType'
              example:
                error_code: 400
                message: 'Bad Request: #: #: 0 subschemas matched instead of one'
        '401':
          description: Not authorized
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseType'
              example:
                error_code: 400
                message: 'Resource not found'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponseType'
              example:
                statusCode: 500
                message: 'Internal server error'
                activityId: 'e4ab80c8-1fdf-4ee8-8a74-68d114cbcbed'
  '/{ecohubId}/offer/nlpi/out':
    get:
      tags:
        - Offer NLPI
      summary: Retrieve an offer NLPI event from the SAF Message Broker
      description: Retrieve an offer NLPI event from the SAF Message Broker
      operationId: get-eh-saf-ecohubid-offer-nlpi-out
      parameters:
        - name: ecohubId
          in: path
          description: >-
            The EcoHubId can be looked up in EcoHub on the Standard API
            Framework configuration page.
          required: true
          schema:
            type: string
        - name: auto.offset.reset
          in: header
          description: The auto offset that should be used to retrieve records
          required: true
          schema:
            enum:
              - earliest
              - latest
            type: string
      responses:
        '200':
          description: "Returns all message which haven't been consumed yet by the techUser"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    topic:
                      type: string
                    key:
                      $ref: '#/components/schemas/SAFKeyType'
                    value:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/SAFEventType'
                        - $ref: '#/components/schemas/SAFInquiryEventType'
                        - $ref: '#/components/schemas/SAFErrorEventType'
                        - $ref: '#/components/schemas/OfferNLPIErrorEventType'
                    partition:
                      type: integer
                    offset:
                      type: integer
                  required:
                    - topic
                    - key
                    - value
                    - partition
                    - offset
              example:
                - topic: eh.saf.329050.offer.nlpi.out
                  key:
                    processId: '5899128-3779-4446-94ef-e2d7d005d2e1'
                  value:
                    id: 3e921406-ee31-42e9-9a17-14c9e42cae21
                    source: http://www.myecohub.ch/ecoHub-mock-insurer-producer1
                    specversion: '1.0'
                    type: data
                    subject: offer nlpi request received
                    time: '2023-08-17T14:15:22.000Z'
                    licenceKey: 8985+9403*jgfksld94&%fjd
                    userAgent:
                      name: Insurer backoffice system 1
                      version: '1.0'
                    eventReceiver:
                      category: broker
                      id: broker1
                    eventSender:
                      category: insurer
                      id: insurer1
                    processId: ff9275bf-5b35-492e-bdd2-c217e151d335
                    processName: offer.nlpi
                    subProcessName: request
                    processStatus: active
                    subProcessStatus: Received
                  partition: 1
                  offset: 4
        '401':
          description: Not authorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseType'
              example:
                error_code: 40301
                message: 'Not authorized to access topics: [eh.saf.329050.offer.nlpi.out]'
components:
  schemas:
    SAFEventType:
      description: 'SAF data event, i.e. an event containing data according to a specific standard'
      type: object
      properties:
        id:
          $ref: '#/components/schemas/iddef'
        source:
          $ref: '#/components/schemas/sourcedef'
        specversion:
          $ref: '#/components/schemas/specversiondef'
        type:
          $ref: '#/components/schemas/EventType'
        datacontenttype:
          $ref: '#/components/schemas/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/dataschemadef'
        subject:
          $ref: '#/components/schemas/subjectdef'
        time:
          $ref: '#/components/schemas/timedef'
        licenceKey:
          "$ref": '#/components/schemas/LicenseKeyType'
        userAgent:
          $ref: '#/components/schemas/UserAgentType'
        eventReceiver:
          $ref: '#/components/schemas/SenderReceiverType'
        eventSender:
          $ref: '#/components/schemas/SenderReceiverType'
        data:
          $ref: '#/components/schemas/EventDataType'
        processId:
          $ref: '#/components/schemas/ProcessIdType'
        processName:
          $ref: '#/components/schemas/ProcessNameType'
        processStatus:
          $ref: '#/components/schemas/ProcessStatusType'
        subProcessName:
          $ref: '#/components/schemas/SubProcessNameType'
        subProcessStatus:
          $ref: '#/components/schemas/SubProcessStatusType'
      additionalProperties: false
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
    SAFInquiryEventType:
      description: 'SAF inquiry event, i.e. an event containing a generic message.'
      type: object
      properties:
        id:
          $ref: '#/components/schemas/iddef'
        source:
          $ref: '#/components/schemas/sourcedef'
        specversion:
          $ref: '#/components/schemas/specversiondef'
        type:
          $ref: '#/components/schemas/EventType'
        datacontenttype:
          $ref: '#/components/schemas/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/dataschemadef'
        subject:
          $ref: '#/components/schemas/subjectdef'
        time:
          $ref: '#/components/schemas/timedef'
        licenceKey:
          "$ref": '#/components/schemas/LicenseKeyType'
        userAgent:
          $ref: '#/components/schemas/UserAgentType'
        eventReceiver:
          $ref: '#/components/schemas/SenderReceiverType'
        eventSender:
          $ref: '#/components/schemas/SenderReceiverType'
        data:
          $ref: '#/components/schemas/EventMessageDataType'
        processId:
          $ref: '#/components/schemas/ProcessIdType'
        processName:
          $ref: '#/components/schemas/ProcessNameType'
        processStatus:
          $ref: '#/components/schemas/ProcessStatusType'
        subProcessName:
          $ref: '#/components/schemas/SubProcessNameType'
        subProcessStatus:
          $ref: '#/components/schemas/SubProcessStatusType'
      additionalProperties: false
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
    iddef:
      description: Identifies the event. Producers MUST ensure that source + id is unique
        for each distinct event. If a duplicate event is re-sent (e.g. due to a network
        error) it MAY have the same id. Consumers MAY assume that Events with identical
        source and id are duplicates.
      example: A234-1234-1234
      minLength: 1
      type: string
    sourcedef:
      description: Uniquely identifies the producer of the event. Must be globally unique,
        including across environments.
      example: http://www.myecohub.ch/iat/ecohub-processes | http://www.myecohub.ch/prod/ecohub-processes | http://www.myecohub.ch/ck/postman
      format: uri-reference
      minLength: 1
      type: string
    specversiondef:
      description: The version of the CloudEvents specification which the event uses. MUST
        be set to 1.0
      example: '1.0'
      minLength: 1
      type: string
    typedef:
      type: string
      minLength: 1
    datacontenttypedef:
      description: Content type of the data value. Must adhere to RFC 2046 format.
      example: text/xml | application/json
      minLength: 1
      type: string
    dataschemadef:
      description: Identifies the schema that data adheres to. Must point to the respective raw schema
        in the EcoHub GitHub schema repository (https://github.com/EcoHub-AG/Standards).
      format: uri
      minLength: 1
      type: string
      example:
        https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiRequestDataType.json |
        https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiDataType.json
    subjectdef:
      description: Describes the subject of the event to provide additional context about
        the event.
      example: Billing november 2024 | MF offer company A
      minLength: 1
      type: string
    timedef:
      description: Timestamp of when the occurrence happened. Must adhere to RFC 3339.
      example: '2018-04-05T17:31:00Z'
      format: date-time
      minLength: 1
      type: string
    EventDataType:
      description: The event payload.
      type: object
      properties:
        payload:
          description: The base64 representation of the first g-zipped and then encrypted
            original payload. For encryption, the AES-GCM algorithm with a 256-bit key,
            a 96-bit initialization vector (IV), and a 128-bit authentication tag must be
            used.
          minLength: 3
          type: string
        payLoadSignature:
          description: Signature key of the signed payload, to verify by whom the encrypted
            message has been created
          minLength: 3
          type: string
        links:
          items:
            type: object
            properties:
              description:
                description: Description of the purpose of the link
                type: string
              href:
                description: the- encrypted URL that should be called, to receive additional
                  encrypted unstructured data, such as pdf, pictures, etc.
                example: https://services.test-myecohub.ch/offer/nlpi/{offerId}/{attachmentId}
                  (unencrypted example)
                minLength: 3
                type: string
              rel:
                description: The IG B2B Standard the links belongs to.
                example: offer-nlpi
                minLength: 3
                type: string
            required:
              - href
              - rel
            additionalProperties: false
          type: array
        encryptionKey:
          description: The encrypted AES key, which was used to symmetrically encrypt the
            transmitted data. The key must be encrypted with the public key of the eventReceiver
            using RSA with PKCS#1 v1.5 padding.
          minLength: 3
          type: string
        publicKeyVersion:
          description: The version of the public key that was used to encrypt the encryptionKey.
          minLength: 3
          type: string
        signatureKeyVersion:
          description: 'The version of the signature key, that was used to sign '
          minLength: 3
          type: string
      required:
        - payload
        - encryptionKey
        - publicKeyVersion
      additionalProperties: false
    EventType:
      description: Defines the type of event / data, inquiry, standard-error or saf-error
      minLength: 1
      type: string
      enum:
        - data
        - inquiry
        - standard-error
        - saf-error
    LicenseKeyType:
      description: The license key for the requesting SC application.
      type: string
      maxLength: 200
      minLength: 3
      example: fdsaf346t54grthe65euz467jhz7r
    ProcessIdType:
      description: UUID, that won't change during the offer processes. The UUID is set by
        the party, that starts the process.
      type: string
      format: uuid
    ProcessNameType:
      description: Comment describing your JSON Schema
      type: string
      enum:
        - offer.nlpi
    ProcessStatusType:
      description: Defines status of the overall process.
      type: string
      enum:
        - active
        - closed
    SenderReceiverType:
      type: object
      additionalProperties: false
      properties:
        category:
          description: The category of the organisation
          enum:
            - broker
            - insurer
            - serviceprovider
          example: broker
          type: string
        id:
          description: The IDP number of the member's techUser. The IDP number of the eventReceiver
            can be determined through the /saf-receivers endpoint of the General API.
          example: IDP1239856
          minLength: 3
          type: string
      required:
        - category
        - id
    SubProcessNameType:
      description: Comment describing your JSON Schema
      type: string
      enum:
        - request
        - offer
        - feedback
        - conclusionDecision
    SubProcessStatusType:
      type: string
      enum:
        - Created
        - Received
        - InProgress
        - Responsed
        - Updated
        - Error
        - Inquiry
        - Inquiry_Answer
        - Closed
    UserAgentType:
      type: object
      description: Identifies the software that was used to produce the event
      properties:
        name:
          description: Name of the application
          example: Client software XYZ
          maxLength: 100
          minLength: 3
          type: string
        version:
          description: Used version of the application
          example: Version 1.0
          maxLength: 30
          minLength: 3
          type: string
      required:
        - name
        - version
      additionalProperties: false
    EventResponseType:
      type: object
      properties:
        key_schema_id:
          type: integer
          description: The ID for the schema used to produce keys, or null if keys were not used
        value_schema_id:
          type: integer
          description: The ID for the schema used to produce keys, or null if keys were not used
        offsets:
          type: array
          description: List of partitions and offsets the messages were published to
          items:
            type: object
            properties:
              partition:
                type: integer
                description: Partition the message was published to, or null if publishing the message failed
              offset:
                type: integer
                description: Offset of the message, or null if publishing the message failed
              error_code:
                type: integer
                description: An error code classifying the reason the operation failed, or null if it succeeded
                enum:
                  - 1
                  - 2
              error:
                type: string
                description: An error message describing why the operation failed, or null if it succeeded
    ErrorResponseType:
      type: object
      properties:
        error_code:
          type: integer
          description: HTTP status of the request
        message:
          type: string
          description: message describing the error
    GeneralErrorResponseType:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status of the request
        message:
          type: string
          description: message describing the error
        activityId:
          type: string
          description: Unique ID for the provided error message
          format: uuid
      additionalProperties: false
    EventMessageDataType:
      description: The event payload.
      type: object
      properties:
        encryptionKey:
          description: The encrypted AES key, which was used to symmetrically encrypt the
            transmitted message. The key must be encrypted with the public key of the eventReceiver
            using RSA with PKCS#1 v1.5 padding.
          minLength: 3
          type: string
        md5MessageHash:
          description: The md5 hash of the byte content of the encrypted data
          minLength: 3
          type: string
        message:
          description: The base64 representation of the first g-zipped and then encrypted
            original message. For encryption, the AES-GCM algorithm with a 256-bit key,
            a 96-bit initialization vector (IV), and a 128-bit authentication tag must be
            used.
          minLength: 3
          type: string
        publicKeyVersion:
          description: The version of the public key that was used to encrypt the encryptionKey.
          minLength: 3
          type: string
      required:
        - message
        - encryptionKey
        - publicKeyVersion
    SAFErrorEventType:
      description: SAF error event, i.e. an event for errors which are unrelated to the event payload.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/iddef'
        source:
          $ref: '#/components/schemas/sourcedef'
        specversion:
          $ref: '#/components/schemas/specversiondef'
        type:
          $ref: '#/components/schemas/EventType'
        datacontenttype:
          $ref: '#/components/schemas/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/dataschemadef'
        subject:
          $ref: '#/components/schemas/subjectdef'
        time:
          $ref: '#/components/schemas/timedef'
        licenceKey:
          "$ref": '#/components/schemas/LicenseKeyType'
        userAgent:
          $ref: '#/components/schemas/UserAgentType'
        data:
          $ref: '#/components/schemas/ErrorDataType'
        eventReceiver:
          $ref: '#/components/schemas/SenderReceiverType'
        eventSender:
          $ref: '#/components/schemas/SenderReceiverType'
        processId:
          $ref: '#/components/schemas/ProcessIdType'
        processName:
          $ref: '#/components/schemas/ProcessNameType'
        processStatus:
          $ref: '#/components/schemas/ProcessStatusType'
        subProcessName:
          $ref: '#/components/schemas/SubProcessNameType'
        subProcessStatus:
          $ref: '#/components/schemas/SubProcessStatusType'
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
      additionalProperties: false
    ErrorDataType:
      description: The error event payload.
      type: object
      properties:
        errorCode:
          description: 'Categorizes the type of error'
          type: string
          minLength: 3
          enum:
            - licenseKey-not-valid
            - sa-not-found
            - receiver-not-found
            - event-not-valid
            - pk-version-not-found
            - data-content-invalid
            - data-schema-invalid
            - data-not-readable
            - data-decryption-failed
            - data-decompression-failed
            - other
        errorMessage:
          description: ""
          type: string
          minLength: 3
        errorDateTime:
          description: ""
          type: string
          format: date-time
      required:
        - errorCode
        - errorMessage
        - errorDateTime
    OfferNLPIErrorEventType:
      description: Offer NLPI error event, i.e. an event for errors which related to the event payload.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/iddef'
        source:
          $ref: '#/components/schemas/sourcedef'
        specversion:
          $ref: '#/components/schemas/specversiondef'
        type:
          $ref: '#/components/schemas/EventType'
        datacontenttype:
          $ref: '#/components/schemas/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/dataschemadef'
        subject:
          $ref: '#/components/schemas/subjectdef'
        time:
          $ref: '#/components/schemas/timedef'
        licenceKey:
          "$ref": '#/components/schemas/LicenseKeyType'
        userAgent:
          $ref: '#/components/schemas/UserAgentType'
        data:
          $ref: "#/components/schemas/OfferNLPIErrorType"
        eventReceiver:
          $ref: '#/components/schemas/SenderReceiverType'
        eventSender:
          $ref: '#/components/schemas/SenderReceiverType'
        processId:
          $ref: '#/components/schemas/ProcessIdType'
        processName:
          $ref: '#/components/schemas/ProcessNameType'
        processStatus:
          $ref: '#/components/schemas/ProcessStatusType'
        subProcessName:
          $ref: '#/components/schemas/SubProcessNameType'
        subProcessStatus:
          $ref: '#/components/schemas/SubProcessStatusType'
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
      additionalProperties: false
    OfferNLPIErrorType:
      type: object
      properties:
        errorCode:
          description: 'The code best describing the occured error.'
          minLength: 3
          type: string
          enum:
            - offer-missing-informations
            - offer-incorrect-informations
            - offer-date-expired
            - offer-missing-claims-expierence
            - offer-requested-several-times
            - offer-already-issued
            - offer-missing-documents
            - offer-incorrect-attachment
            - offer-other-error
            - mandate-missing
            - mandate-expired
            - mandate-terminated
            - mandate-invalid
            - mandate-other-error
            - cooperationagreement-missing
            - cooperationagreement-expired-terminated
            - cooperationagreement-other-error
            - customer-data-referenceno-mismatch
            - customer-data-incomplete
            - customer-data-incorrect
            - customer-not-identified
            - customer-other-error
            - claims-expierence-date-range-invalid
            - claims-expierence-data-incorrect
            - claims-expierence-contract-incorrect
            - claims-expierence-customer-incorrect
            - claims-expierence-other-error
        errorMessage:
          description: Error message
          minLength: 3
          type: string
        incorrectDataList:
          description: List of JSON paths, where wrong information has been entered
          items:
            type: string
          minItems: 1
          type: array
        errorDateTime:
          description: Date and time of the error
          format: date-time
          type: string
        missingDataList:
          description: List of JSON paths, where information is missing
          items:
            type: string
          minItems: 1
          type: array
      required:
        - errorCode
        - errorMessage
        - errorDateTime
    SAFKeyType:
      description: Format of the kafka message key
      type: object
      properties:
        processId:
          $ref: '#/components/schemas/ProcessIdType'
      additionalProperties: false
      required:
        - processId
