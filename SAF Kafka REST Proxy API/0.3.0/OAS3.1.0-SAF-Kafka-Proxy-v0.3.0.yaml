openapi: 3.1.0
info:
  title: 'Standard API Framwork: Message Broker System'
  contact:
    email: support@myecohub.ch
    name: EcoHub AG
    url: 'https://www.myecohub.ch'
  description: >
    ## Changelog

    ### Version 0.2.4 (05.06.2024)
    
    - Renamed the current events OfferNLPIEventType and OfferNLPIInquiryEventType to SAFEventType and SAFInquiryEventType
    
    - Added 5 new types: SAFErrorEventType, OfferNLPIErrorEventType, ErrorDataType, ProcessNameType and SubProcessNameType,  
    
    - Removed datadef and data_base64def from the CloudEventsType
    
    - Removed "nullable: false" definitions for all types
    
    - Added new SubProcessStatus to enumeration: Error, Inquiry, Inquiry_Answer
    
    - Changed the SenderReceiverType, to support SoftwareProviderAgreement flows
    
    - Changed the EventType, to reflect more the type of event, e.g. data, inquiry, standard-error, saf-error

    - Added new property processname to all events, this property contains the type of process, e.g. offer nlpi, billing, ...

    - Changed the EventDataType, the md5payloadHash has been replaced by a payloadSignature property, apart from that a signaturePublicKeyVersion has been added. This allows the sender to not only encrypt the data, so that only the receiver can decrypt it, but also to proof that the data has been encrypted by the sender.

    ### Version 0.2.3 (27.09.2023)
    
    - Correcting the response defintion for the /{ecohubId}/offer/nlpi/out endpoint, as it returns an array of Kafka records, that contains the actual offer nlpi event event.
    
    - Refactored the components schemas and types. The structure and informations required in the events are the same as in the previous version 0.2.3
    
    - Incooperated the cloud events definitions and eliminated the allOf property
    
    
    ### Version 0.2.2 (06.09.2023)

    New OAS specification has been created, align with the asyncapi "Standard
    API Framwork: Message Broker System" version 0.2.2


    This API describes the endpoints, that can be used to access the Apacha
    Kafka. This allows the API users to publish events to topics or subscribe to
    topics to receive the data.
  

  version: v0.2.3
servers:
  - url: 'https://services.test-myecohub.ch/eh/saf/{version}'
    variables:
      version:
        default: v0.2.3
        description: the version of the API
paths:
  /in:
    post:
      tags:
        - Offer NLPI
      summary: Post an offer NLPI event to the SAF Message Broker
      description: Post an offer NLPI event to the SAF Message Broker
      operationId: post-eh-saf-in
      parameters:
        - name: schemaVersionId
          in: header
          description: The Kafka schemaVersionId that is used to serialize the request
          schema:
            type: integer
        - name: Content-Type
          in: header
          required: true
          schema:
            enum:
              - application/vnd.kafka.jsonschema.v2+json
            type: string
            default: application/vnd.kafka.jsonschema.v2+json
      requestBody:
        description: Offer NLPI event to SAF Message Broker.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SAFEventType'
                - $ref: '#/components/schemas/SAFInquiryEventType'
            example:
              licenceKey: fdsaf346t54grthe65euz467jhz7r
              userAgent:
                name: Client software XYZ
                version: Version 1.0
              type: string
              data: {}
              eventReceiver:
                category: broker
                id: broker1_idp
              eventSender:
                category: insurer
                id: insurer1_idp
              processId: string
              processStatus: active
              subProcessName: offer.nlpi
              subProcessStatus: Created
              id: string
              source: string
              specversion: string
              datacontenttype: string
              dataschema: string
              subject: string
              time: string
              data_base64: string
      responses:
        '200':
          description: Returns EventResponseType
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponseType'
        '400':
          description: Bad request. Input data is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponseType'
              example:
                returnCode: ERROR
                errorMessageId: string
                errorMessage: The requested resource is not available
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponseType'
              example:
                returnCode: ERROR
                errorMessageId: string
                errorMessage: The requested resource is not available
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponseType'
              example:
                returnCode: ERROR
                errorMessageId: string
                errorMessage: The requested resource is not available
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponseType'
              example:
                returnCode: ERROR
                errorMessageId: string
                errorMessage: The requested resource is not available
  '/{ecohubId}/offer/nlpi/out':
    get:
      tags:
        - Offer NLPI
      summary: Retrieve an offer NLPI event from the SAF Message Broker
      description: Retrieve an offer NLPI event from the SAF Message Broker
      operationId: get-eh-saf-ecohubid-offer-nlpi-out
      parameters:
        - name: ecohubId
          in: path
          description: >-
            The EcoHubId can be looked up in EcoHub on the Standard API
            Framework configuration page.
          required: true
          schema:
            type: string
        - name: auto.offset.reset
          in: header
          description: The auto offset that should be used to retrieve records
          required: true
          schema:
            enum:
              - earliest
              - latest
            type: string
        - name: Content-Type
          in: header
          schema:
            enum:
              - application/vnd.kafka.jsonschema.v2+json
              - application/vnd.kafka.json.v2+json
            type: string
            default: application/vnd.kafka.jsonschema.v2+json
        - name: Accept
          in: header
          required: true
          schema:
            enum:
              - application/vnd.kafka.jsonschema.v2+json
              - application/json
            type: string
            default: application/vnd.kafka.jsonschema.v2+json
      responses:
        '200':
          description: "Returns one of the following types: nlpiOfferEvent, nlpiOfferInquiryEvent"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    topic:
                      type: string
                    key: {}
                    value:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/SAFEventType'
                        - $ref: '#/components/schemas/SAFInquiryEventType'
                    partition:
                      type: integer
                    offset:
                      type: integer
                  required:
                    - topic
                    - key
                    - value
                    - partition
                    - offset
              example:
                - topic: eh.saf.{ecohubid}.out
                  value:
                    licenceKey: fdsaf346t54grthe65euz467jhz7r
                    userAgent:
                      name: Client software XYZ
                      version: Version 1.0
                    type: string
                    data: {}
                    eventReceiver:
                      category: broker
                      id: broker1_idp
                    eventSender:
                      category: broker
                      id: broker1_idp
                    processId: string
                    processStatus: active
                    subProcessName: offer.nlpi
                    subProcessStatus: Created
                    id: string
                    source: string
                    specversion: string
                    datacontenttype: string
                    dataschema: string
                    subject: string
                    time: string
                    data_base64: string
                  offset: 44
                  partition: 0
            application/vnd.kafka.jsonschema.v2+json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    topic:
                      type: string
                    key: {}
                    value:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/SAFEventType'
                        - $ref: '#/components/schemas/SAFInquiryEventType'
                    partition:
                      type: integer
                    offset:
                      type: integer
                  required:
                    - topic
                    - key
                    - value
                    - partition
                    - offset
              example:
                - topic: eh.saf.{ecohubid}.out
                  value:
                    licenceKey: fdsaf346t54grthe65euz467jhz7r
                    userAgent:
                      name: Client software XYZ
                      version: Version 1.0
                    type: string
                    data: {}
                    eventReceiver:
                      category: broker
                      id: broker1_idp
                    eventSender:
                      category: broker
                      id: broker1_idp
                    processId: string
                    processStatus: active
                    subProcessName: offer.nlpi
                    subProcessStatus: Created
                    id: string
                    source: string
                    specversion: string
                    datacontenttype: string
                    dataschema: string
                    subject: string
                    time: string
                    data_base64: string
                  offset: 44
                  partition: 0
        '400':
          description: Bad request. Input data is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponseType'
              example:
                returnCode: ERROR
                errorMessageId: string
                errorMessage: The requested resource is not available
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponseType'
              example:
                returnCode: ERROR
                errorMessageId: string
                errorMessage: The requested resource is not available
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponseType'
              example:
                returnCode: ERROR
                errorMessageId: string
                errorMessage: The requested resource is not available
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorResponseType'
              example:
                returnCode: ERROR
                errorMessageId: string
                errorMessage: The requested resource is not available
components:
  schemas:
    EventResponseType:
      type: object
      properties:
        key_schema_id:
          type: integer
          description:  The ID for the schema used to produce keys, or null if keys were not used
        value_schema_id:
          type: integer
          description:  The ID for the schema used to produce keys, or null if keys were not used
        offsets:
          type: array
          description: List of partitions and offsets the messages were published to
          items:
            type: object
            properties:
              partition:
                type: integer
                description: Partition the message was published to, or null if publishing the message failed
              offset:
                type: integer
                description: Offset of the message, or null if publishing the message failed
              error_code:
                type: integer
                description: An error code classifying the reason the operation failed, or null if it succeeded
                enum:
                  - 1
                  - 2
              error:
                type: string
                description: An error message describing why the operation failed, or null if it succeeded
    GeneralErrorResponseType:
      required:
        - returnCode
        - errorMessageId
        - errorMessage
      type: object
      properties:
        returnCode:
          $ref: '#/components/schemas/GeneralErrorReturnCode'
        errorMessageId:
          type: string
          description: Unique ID for the provided error message
          format: uuid
        errorMessage:
          type: string
          description: Error message that belongs to the errorMessageId
          nullable: true
          example: The requested resource is not available
      additionalProperties: false
    GeneralResponseType:
      type: object
      properties:
        returnCode:
          enum:
            - OK
          type: string
      additionalProperties: false
    GeneralErrorReturnCode:
      enum:
        - ERROR
      type: string
      example: ERROR
    SAFEventType:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/iddef'
        source:
          $ref: '#/components/schemas/sourcedef'
        specversion:
          $ref: '#/components/schemas/specversiondef'
        datacontenttype:
          $ref: '#/components/schemas/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/dataschemadef'
        subject:
          $ref: '#/components/schemas/subjectdef'
        time:
          $ref: '#/components/schemas/timedef'
        licenceKey:
          $ref: '#/components/schemas/licenceKeyType'
        userAgent:
          $ref: '#/components/schemas/userAgentType'
        type:
          $ref: '#/components/schemas/eventType'
        data:
          $ref: '#/components/schemas/dataType'
        eventReceiver:
          $ref: "#/components/schemas/senderReceiverType"
        eventSender:
          $ref: "#/components/schemas/senderReceiverType"
        processId:
          $ref: "#/components/schemas/processIdType"
        processName:
          $ref: "#/components/schemas/processNameType"        
        processStatus:
          $ref: "#/components/schemas/processStatusType"
        subProcessName:
          $ref: "#/components/schemas/subProcessNameType"
        subProcessStatus:
          $ref: "#/components/schemas/subProcessStatusType"
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
    SAFInquiryEventType:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/iddef'
        source:
          $ref: '#/components/schemas/sourcedef'
        specversion:
          $ref: '#/components/schemas/specversiondef'
        datacontenttype:
          $ref: '#/components/schemas/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/dataschemadef'
        subject:
          $ref: '#/components/schemas/subjectdef'
        time:
          $ref: '#/components/schemas/timedef'
        licenceKey:
          $ref: '#/components/schemas/licenceKeyType'
        userAgent:
          $ref: '#/components/schemas/userAgentType'
        type:
          $ref: '#/components/schemas/eventType'
        data:
          $ref: '#/components/schemas/eventMessageDataType'
        eventReceiver:
          $ref: "#/components/schemas/senderReceiverType"
        eventSender:
          $ref: "#/components/schemas/senderReceiverType"
        processId:
          $ref: "#/components/schemas/processIdType"
        processName:
          $ref: "#/components/schemas/processNameType"
        processStatus:
          $ref: "#/components/schemas/processStatusType"
        subProcessName:
          $ref: "#/components/schemas/subProcessNameType"
        subProcessStatus:
          $ref: "#/components/schemas/subProcessStatusType"
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
    SAFErrorEventType:
      description: Offer NLPI Event JSON schema definition
      type: object
      properties:
        id:
          $ref: '#/components/schemas/iddef'
        source:
          $ref: '#/components/schemas/sourcedef'
        specversion:
          $ref: '#/components/schemas/specversiondef'
        datacontenttype:
          $ref: '#/components/schemas/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/dataschemadef'
        subject:
          $ref: '#/components/schemas/subjectdef'
        time:
          $ref: '#/components/schemas/timedef'
        licenceKey:
          $ref: '#/components/schemas/licenceKeyType'
        userAgent:
          $ref: '#/components/schemas/userAgentType'
        type:
          $ref: '#/components/schemas/eventType'
        data:
          $ref: "#/components/schemas/errorDataType"
        eventReceiver:
          $ref: "#/components/schemas/senderReceiverType"
        eventSender:
          $ref: "#/components/schemas/senderReceiverType"
        processId:
          $ref: "#/components/schemas/processIdType"
        processName:
          $ref: "#/components/schemas/processNameType"
        processStatus:
          $ref: "#/components/schemas/processStatusType"
        subProcessName:
          $ref: "#/components/schemas/subProcessNameType"
        subProcessStatus:
          $ref: "#/components/schemas/subProcessStatusType"
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
    OfferNLPIErrorEventType:
      description: Offer NLPI Event JSON schema definition
      type: object
      properties:
        id:
         $ref: '#/components/schemas/iddef'
        source:
          $ref: '#/components/schemas/sourcedef'
        specversion:
          $ref: '#/components/schemas/specversiondef'
        type:
          $ref: '#/components/schemas/eventType'
        datacontenttype:
          $ref: '#/components/schemas/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/dataschemadef'
        subject:
          $ref: '#/components/schemas/subjectdef'
        time:
          $ref: '#/components/schemas/timedef'
        licenceKey:
          $ref: '#/components/schemas/licenceKeyType'
        userAgent:
          $ref: '#/components/schemas/userAgentType'
        data:
          $ref: "#/components/schemas/offerNLPIErrorType"
        eventReceiver:
          $ref: "#/components/schemas/senderReceiverType"
        eventSender:
          $ref: "#/components/schemas/senderReceiverType"
        processId:
          $ref: "#/components/schemas/processIdType"
        processName:
          $ref: "#/components/schemas/processNameType"
        processStatus:
          $ref: "#/components/schemas/processStatusType"
        subProcessName:
          $ref: "#/components/schemas/subProcessNameType"
        subProcessStatus:
          $ref: "#/components/schemas/subProcessStatusType"
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
    offerNLPIErrorType:
      type: object
      properties:
        errorCode:
          description: 'The payload needs to be first encrypted and afterwards gzipped. the base64 repesentation of gezipped bytes will be added as payload '
          type: string
          minLength: 3
          enum:
            - offer-missing-informations
            - offer-incorrect-informations
            - offer-date-expired
            - offer-missing-claims-expierence
            - offer-requested-several-times
            - offer-already-issued
            - offer-missing-documents
            - offer-incorrect-attachment
            - offer-other-error
            - mandate-missing
            - mandate-expired
            - mandate-terminated
            - mandate-invalid
            - mandate-other-error
            - cooperationagreement-missing
            - cooperationagreement-expired-terminated
            - cooperationagreement-other-error
            - customer-data-referenceno-mismatch
            - customer-data-incomplete
            - customer-data-incorrect
            - customer-not-identified
            - customer-other-error
            - claims-expierence-date-range-invalid
            - claims-expierence-data-incorrect
            - claims-expierence-contract-incorrect
            - claims-expierence-customer-incorrect
            - claims-expierence-other-error
        errorMessage:
          description: Error message
          type: string
          minLength: 3
        missingDataList:
          description: List of JSON paths, where information is missing
          type: array
          minItems: 1
          items:
            type: string
        incorrectDataList:
          description: List of JSON paths, where wrong information has been entered
          type: array
          minItems: 1
          items:
            type: string
        errorDateTime:
          description: Date and time of the error
          type: string
          format: date-time
      allOf:
        - if:
            properties:
              errorCode:
                const: offer-missing-informations
          then:
            required:
              - missingDataList
        - if:
            properties:
              errorCode:
                const: offer-incorrect-informations
          then:
            required:
              - incorrectDataList
        - if:
            properties:
              errorCode:
                const: offer-missing-claims-expierence
          then:
            required:
              - missingDataList
        - if:
            properties:
              errorCode:
                const: offer-missing-documents
          then:
            required:
              - missingDataList
        - if:
            properties:
              errorCode:
                const: offer-incorrect-attachment
          then:
            required:
              - incorrectDataList
        - if:
            properties:
              errorCode:
                const: customer-data-incomplete
          then:
            required:
              - missingDataList
        - if:
            properties:
              errorCode:
                const: customer-data-incorrect
          then:
            required:
              - incorrectDataList
      required:
        - errorCode
        - errorMessage
        - errorDateTime
    processNameType:
      description: Comment describing your JSON Schema
      type: string
      enum:
        - offer.nlpi
      example: offer.nlpi
      
    eventType:
      type: string
      minLength: 1
      enum:
        - data
        - inquiry
        - standard-error
        - saf-error
      description: Defines the type of event / data, inquiry, standard-error or saf-error
    eventMessageDataType:
      description: The event payload.
      type: object
      properties:
        message:
          description: 'The payload needs to be first encrypted and afterwards gzipped. the base64 repesentation of gezipped bytes will be added as payload '
          type: string
          minLength: 3
        md5MessageHash:
          description: The md5 hash of the byte content of the encrypted data
          type: string
          minLength: 3
        encryptionKey:
          description: The with the public key of the receiver encrypted symmetric key to decrypt the data (KEK)
          type: string
          minLength: 3
        publicKeyVersion:
          description: The version of the public key used to encrypt the DEK
          type: string
          minLength: 3
      required:
        - message
        - encryptionKey
        - publicKeyVersion
    errorDataType:
      description: The error event payload.
      type: object
      properties:
        errorCode:
          description: 'The payload needs to be first encrypted and afterwards gzipped. the base64 repesentation of gezipped bytes will be added as payload '
          type: string
          minLength: 3
          enum:
            - licenseKey-not-valid
            - sa-not-found
            - receiver-not-found
            - event-not-valid
            - pk-version-not-found
            - data-content-invalid
            - data-schema-invalid
            - data-not-readable
            - data-decryption-failed
            - data-decompression-failed
            - other
        errorMessage:
          description: ""
          type: string
          minLength: 3
        errorDateTime:
          description: ""
          type: string
          format: date-time
      required:
        - errorCode
        - errorMessage
        - errorDateTime
    subProcessNameType:
      description: Comment describing your JSON Schema
      type: string
      enum:
        - request
        - offer
        - feedback
        - conclusionDecision
      example: request
    subProcessStatusType:
      type: string
      enum:
        - Created
        - Received
        - InProgress
        - Responsed
        - Updated
        - Error
        - Inquiry
        - Inquiry_Answer
        - Closed
    conversationType:
      type: object
      properties:
        message:
          type: string
          
          description: >-
            Zipped and encrypted base64 representation of the messageArrayType
            JSON defined in the AsyncAPI
        md5MessageHash:
          type: string
          description: The md5 hash of the byte content of the encrypted data
        encryptionKey:
          type: string
          
          description: >-
            The with the public key of the receiver encrypted symmetric key to
            decrypt the data (KEK)
        publicKeyVersion:
          type: string
          
          description: The version of the public key used to encrypt the DEK
      required:
        - message
        - encryptionKey
        - publicKeyVersion
    processStatusType:
      type: string
      enum:
        - active
        - closed
      description: Defines status of the overall process. 
    processIdType:
      type: string
      format: UUID
      description: UUID, that won't change during the offer processes. The UUID is set by the party, that starts the process.
    senderReceiverType:
      type: object
      properties:
        category:
          type: string
          enum:
            - broker
            - insurer
            - serviceprovider
          
          example: broker
          description: The category of organisation
        id:
          type: string
          minLength: 3
          description: Depending on the type either the brokerRegNo/IDPNumber or the insurerCode needs to be set
      required:
        - category
        - id
      additionalProperties: false
    dataType:
      type: object
      properties:
        payload:
          type: string
          
          description: >-
            Zipped and encrypted base64 representation of the IG B2B JSON
            structured data
        md5PayloadHash:
          type: string
          description: The md5 hash of the byte content of the encrypted data
        links:
          type: array
          
          items:
            properties:
              href:
                type: string
                
                example: >-
                  https://services.test-myecohub.ch/offer/nlpi/{offerId}/{attachmentId}
                  (unencrypted example)
                description: >-
                  the- encrypted URL that should be called, to receive
                  additional encrypted unstructured data, such as pdf, pictures,
                  etc.
              rel:
                type: string
                
                description: The IG B2B Standard the links belongs to.
                example: offer-nlpi
              description:
                type: string
                
                description: Description of the purpose of the link
            required:
              - href
              - rel
        encryptionKey:
          type: string
          
          description: >-
            The with the public key of the receiver encrypted symmetric key to
            decrypt the data (KEK)
        publicKeyVersion:
          type: string
          
          description: The version of the public key used to encrypt the DEK
      required:
        - payload
        - encryptionKey
        - publicKeyVersion
    
      
    iddef:
      description: Identifies the event.
      type: string
      minLength: 1
    sourcedef:
      type: string
      minLength: 1
      format: uri-reference
    specversiondef:
      type: string
      minLength: 1
    typedef:
      type: string
      minLength: 1
    datacontenttypedef:
      type: string
      minLength: 1
    dataschemadef:
      type: string
      minLength: 1
      format: uri
    subjectdef:
      type: string
      minLength: 1
    timedef:
      type: string
      format: date-time
   
    licenceKeyType:
      type: string
      description: The license key for the requesting SC application.
      example: fdsaf346t54grthe65euz467jhz7r
      maxLength: 200
      
    messageArrayType:
      type: array
      minItems: 1
      maxItems: 4
      items:
        $ref: '#/components/schemas/messageType'
    messageType:
      properties:
        messageLocale:
          type: string
          
          maxLength: 2
          format: '[a-z]{2}'
          example: de
          description: '2 digit language iso code of the message, following ISO 639-1'
        message:
          type: string
          
          maxLength: 500
          description: the localized message
      required:
        - message
        - messageLocale
      additionalProperties: false
    userAgentType:
      type: object
      properties:
        name:
          type: string
          example: Client software XYZ
          description: "Name of the application"
          maxLength: 100
          
        version:
          type: string
          example: Version 1.0
          maxLength: 30
          description: "Used version of the application"
          
      required:
        - name
        - version