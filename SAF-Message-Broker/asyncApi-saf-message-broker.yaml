asyncapi: 3.0.0
id: 'https://www.myecohub.ch'
info:
  title: 'Standard API Framework: Message Broker System'
  version: 0.3.5
  contact:
    email: support@myecohub.ch
    name: EcoHub AG
    url: 'https://www.myecohub.ch'
  description: >
    ## Changelog
    
    ### Version 0.3.5
      - Changed definition of the kafka message key from uuid to object with processId
    
    ### Version 0.3.4
      - Fixed schema registry urls
    
    ### Version 0.3.3
      - Enhanced documentation
    
    ### Version 0.3.2
      - Enhanced documentation
    
    ### Version 0.3.1
      - Added SafErrorEvent and OfferNLPIErrorEvent as valid messages for all operations.
      - Updated documentation (descriptions and examples).
      - EventDataType
        - Prohibit additional properties
      - SAFErrorEventType
        - Prohibit additional properties
      - UserAgentType
        - Prohibit additional properties
    
    ### Version 0.2.4 (20.08.2024) - Initial public release
servers:
  ecohub-iat-saf-server:
    host: saf.test-myecohub.ch:9092
    protocol: kafka-secure
    description: EcoHub IAT SAF broker
    bindings:
      kafka:
        schemaRegistryUrl: "https://services.test-myecohub.ch/schemaregistry"
        schemaRegistryVendor: "confluent"
    security:
      - $ref: '#/components/securitySchemes/X509'
  ecohub-prod-saf-server:
    host: saf.myecohub.ch:9092
    protocol: kafka-secure
    description: EcoHub Prod SAF broker
    bindings:
      kafka:
        schemaRegistryUrl: "https://services.myecohub.ch/schemaregistry"
        schemaRegistryVendor: "confluent"
    security:
      - $ref: '#/components/securitySchemes/X509'
defaultContentType: application/json
channels:
  eh.saf.in:
    address: eh.saf.in
    bindings:
      kafka:
        topic: 'eh.saf.in'
        partitions: 9
        replicas: 2
        topicConfiguration:
          cleanup.policy: [ "delete" ]
          retention.ms: 604800000
          retention.bytes: -1
          delete.retention.ms: 86400000
          max.message.bytes: 5242880
        bindingVersion: '0.4.0'
    messages:
      produceSAFEvent:
        $ref: '#/components/messages/safEvent'
      produceSAFInquiryEvent:
        $ref: '#/components/messages/safInquiryEvent'
      safErrorEvent:
        $ref: '#/components/messages/safErrorEvent'
      offerNlpiErrorEvent:
        $ref: '#/components/messages/offerNlpiErrorEvent'
  eh.saf.offer.out:
    address: eh.saf.{ecohubId}.offer.nlpi.out
    bindings:
      kafka:
        topic: 'eh.saf.{ecohubId}.offer.nlpi.out'
        partitions: 3
        replicas: 2
        topicConfiguration:
          cleanup.policy: [ "delete" ]
          retention.ms: 604800000
          retention.bytes: -1
          delete.retention.ms: 86400000
          max.message.bytes: 5242880
        bindingVersion: '0.4.0'
    parameters:
      ecohubId:
        description: "The EcoHubId can be looked up in EcoHub on the SAF TechUser page."
    messages:
      consumeSAFEvent:
        $ref: '#/components/messages/safEvent'
      consumeSAFInquiryEvent:
        $ref: '#/components/messages/safInquiryEvent'
      safErrorEvent:
        $ref: '#/components/messages/safErrorEvent'
      offerNlpiErrorEvent:
        $ref: '#/components/messages/offerNlpiErrorEvent'
operations:
  produceSAFEvent:
    action: send
    channel:
      $ref: "#/channels/eh.saf.in"
  consumeOfferEvent:
    action: receive
    bindings:
      kafka:
        groupId:
          type: string
          pattern: ^CG-(\d{5,6})-IDP(\d{6})$
        clientId:
          type: string
          format: uuid
        bindingVersion: '0.4.0'
    channel:
      $ref: "#/channels/eh.saf.offer.out"
components:
  securitySchemes:
    X509:
      type: X509
      description: Provide the techuser certificate for authentication
  schemas:
    SAFEventType:
      description: 'SAF data event, i.e. an event containing data according to a specific standard'
      type: object
      properties:
        id:
          $ref: '#/components/schemas/cloudEvents/iddef'
        source:
          $ref: '#/components/schemas/cloudEvents/sourcedef'
        specversion:
          $ref: '#/components/schemas/cloudEvents/specversiondef'
        type:
          $ref: '#/components/schemas/eventType'
        datacontenttype:
          $ref: '#/components/schemas/cloudEvents/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/cloudEvents/dataschemadef'
        subject:
          $ref: '#/components/schemas/cloudEvents/subjectdef'
        time:
          $ref: '#/components/schemas/cloudEvents/timedef'
        licenceKey:
          $ref: '#/components/schemas/licenceKeyType'
        userAgent:
          $ref: '#/components/schemas/userAgentType'
        eventReceiver:
          $ref: '#/components/schemas/senderReceiverType'
        eventSender:
          $ref: '#/components/schemas/senderReceiverType'
        data:
          $ref: '#/components/schemas/eventDataType'
        processId:
          $ref: '#/components/schemas/processIdType'
        processName:
          $ref: '#/components/schemas/processNameType'
        processStatus:
          $ref: '#/components/schemas/processStatusType'
        subProcessName:
          $ref: '#/components/schemas/subProcessNameType'
        subProcessStatus:
          $ref: '#/components/schemas/subProcessStatusType'
      additionalProperties: false
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
    SAFInquiryEventType:
      $id: SAFInquiryEventType
      description: 'SAF inquiry event, i.e. an event containing a generic message.'
      type: object
      properties:
        id:
          $ref: '#/components/schemas/cloudEvents/iddef'
        source:
          $ref: '#/components/schemas/cloudEvents/sourcedef'
        specversion:
          $ref: '#/components/schemas/cloudEvents/specversiondef'
        datacontenttype:
          $ref: '#/components/schemas/cloudEvents/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/cloudEvents/dataschemadef'
        subject:
          $ref: '#/components/schemas/cloudEvents/subjectdef'
        time:
          $ref: '#/components/schemas/cloudEvents/timedef'
        licenceKey:
          $ref: '#/components/schemas/licenceKeyType'
        userAgent:
          $ref: '#/components/schemas/userAgentType'
        type:
          $ref: '#/components/schemas/eventType'
        data:
          $ref: '#/components/schemas/eventMessageDataType'
        eventReceiver:
          $ref: "#/components/schemas/senderReceiverType"
        eventSender:
          $ref: "#/components/schemas/senderReceiverType"
        processId:
          $ref: "#/components/schemas/processIdType"
        processName:
          $ref: "#/components/schemas/processNameType"
        processStatus:
          $ref: "#/components/schemas/processStatusType"
        subProcessName:
          $ref: "#/components/schemas/subProcessNameType"
        subProcessStatus:
          $ref: "#/components/schemas/subProcessStatusType"
      additionalProperties: false
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
    SAFErrorEventType:
      $id: SAFErrorEventType
      description: SAF error event, i.e. an event for errors which are unrelated to the event payload.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/cloudEvents/iddef'
        source:
          $ref: '#/components/schemas/cloudEvents/sourcedef'
        specversion:
          $ref: '#/components/schemas/cloudEvents/specversiondef'
        datacontenttype:
          $ref: '#/components/schemas/cloudEvents/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/cloudEvents/dataschemadef'
        subject:
          $ref: '#/components/schemas/cloudEvents/subjectdef'
        time:
          $ref: '#/components/schemas/cloudEvents/timedef'
        licenceKey:
          $ref: '#/components/schemas/licenceKeyType'
        userAgent:
          $ref: '#/components/schemas/userAgentType'
        type:
          $ref: '#/components/schemas/eventType'
        data:
          $ref: "#/components/schemas/errorDataType"
        eventReceiver:
          $ref: "#/components/schemas/senderReceiverType"
        eventSender:
          $ref: "#/components/schemas/senderReceiverType"
        processId:
          $ref: "#/components/schemas/processIdType"
        processName:
          $ref: "#/components/schemas/processNameType"
        processStatus:
          $ref: "#/components/schemas/processStatusType"
        subProcessName:
          $ref: "#/components/schemas/subProcessNameType"
        subProcessStatus:
          $ref: "#/components/schemas/subProcessStatusType"
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
      additionalProperties: false
    OfferNLPIErrorEventType:
      description: Offer NLPI error event, i.e. an event for errors which related to the event payload.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/cloudEvents/iddef'
        source:
          $ref: '#/components/schemas/cloudEvents/sourcedef'
        specversion:
          $ref: '#/components/schemas/cloudEvents/specversiondef'
        type:
          $ref: '#/components/schemas/eventType'
        datacontenttype:
          $ref: '#/components/schemas/cloudEvents/datacontenttypedef'
        dataschema:
          $ref: '#/components/schemas/cloudEvents/dataschemadef'
        subject:
          $ref: '#/components/schemas/cloudEvents/subjectdef'
        time:
          $ref: '#/components/schemas/cloudEvents/timedef'
        licenceKey:
          $ref: '#/components/schemas/licenceKeyType'
        userAgent:
          $ref: '#/components/schemas/userAgentType'
        data:
          $ref: "#/components/schemas/offerNLPIErrorType"
        eventReceiver:
          $ref: "#/components/schemas/senderReceiverType"
        eventSender:
          $ref: "#/components/schemas/senderReceiverType"
        processId:
          $ref: "#/components/schemas/processIdType"
        processName:
          $ref: "#/components/schemas/processNameType"
        processStatus:
          $ref: "#/components/schemas/processStatusType"
        subProcessName:
          $ref: "#/components/schemas/subProcessNameType"
        subProcessStatus:
          $ref: "#/components/schemas/subProcessStatusType"
      required:
        - id
        - source
        - specversion
        - type
        - processId
        - processName
        - subProcessName
        - processStatus
        - subProcessStatus
        - eventReceiver
        - eventSender
        - userAgent
        - licenceKey
      additionalProperties: false
    offerNLPIErrorType:
      type: object
      properties:
        errorCode:
          description: 'The code best describing the occured error.'
          type: string
          minLength: 3
          enum:
            - offer-missing-informations
            - offer-incorrect-informations
            - offer-date-expired
            - offer-missing-claims-expierence
            - offer-requested-several-times
            - offer-already-issued
            - offer-missing-documents
            - offer-incorrect-attachment
            - offer-other-error
            - mandate-missing
            - mandate-expired
            - mandate-terminated
            - mandate-invalid
            - mandate-other-error
            - cooperationagreement-missing
            - cooperationagreement-expired-terminated
            - cooperationagreement-other-error
            - customer-data-referenceno-mismatch
            - customer-data-incomplete
            - customer-data-incorrect
            - customer-not-identified
            - customer-other-error
            - claims-expierence-date-range-invalid
            - claims-expierence-data-incorrect
            - claims-expierence-contract-incorrect
            - claims-expierence-customer-incorrect
            - claims-expierence-other-error
        errorMessage:
          description: Error message
          type: string
          minLength: 3
        missingDataList:
          description: List of JSON paths, where information is missing
          type: array
          minItems: 1
          items:
            type: string
        incorrectDataList:
          description: List of JSON paths, where wrong information has been entered
          type: array
          minItems: 1
          items:
            type: string
        errorDateTime:
          description: Date and time of the error
          type: string
          format: date-time
      allOf:
        - if:
            properties:
              errorCode:
                const: offer-missing-informations
          then:
            required:
              - missingDataList
        - if:
            properties:
              errorCode:
                const: offer-incorrect-informations
          then:
            required:
              - incorrectDataList
        - if:
            properties:
              errorCode:
                const: offer-missing-claims-expierence
          then:
            required:
              - missingDataList
        - if:
            properties:
              errorCode:
                const: offer-missing-documents
          then:
            required:
              - missingDataList
        - if:
            properties:
              errorCode:
                const: offer-incorrect-attachment
          then:
            required:
              - incorrectDataList
        - if:
            properties:
              errorCode:
                const: customer-data-incomplete
          then:
            required:
              - missingDataList
        - if:
            properties:
              errorCode:
                const: customer-data-incorrect
          then:
            required:
              - incorrectDataList
      required:
        - errorCode
        - errorMessage
        - errorDateTime
    processNameType:
      description: Comment describing your JSON Schema
      type: string
      enum:
        - offer.nlpi
      example: offer.nlpi
    eventType:
      type: string
      minLength: 1
      enum:
        - data
        - inquiry
        - standard-error
        - saf-error
      description: Defines the type of event / data, inquiry, standard-error or saf-error
    eventMessageDataType:
      description: The event payload.
      type: object
      properties:
        encryptionKey:
          description: The encrypted AES key, which was used to symmetrically encrypt the
            transmitted message. The key must be encrypted with the public key of the eventReceiver
            using RSA with PKCS#1 v1.5 padding.
          minLength: 3
          type: string
        md5MessageHash:
          description: The md5 hash of the byte content of the encrypted data
          minLength: 3
          type: string
        message:
          description: The base64 representation of the first g-zipped and then encrypted
            original message. For encryption, the AES-GCM algorithm with a 256-bit key,
            a 96-bit initialization vector (IV), and a 128-bit authentication tag must be
            used.
          minLength: 3
          type: string
        publicKeyVersion:
          description: The version of the public key that was used to encrypt the encryptionKey.
          minLength: 3
          type: string
      required:
        - message
        - encryptionKey
        - publicKeyVersion
    errorDataType:
      description: The error event payload.
      type: object
      properties:
        errorCode:
          description: 'Categorizes the type of error'
          type: string
          minLength: 3
          enum:
            - licenseKey-not-valid
            - sa-not-found
            - receiver-not-found
            - event-not-valid
            - pk-version-not-found
            - data-content-invalid
            - data-schema-invalid
            - data-not-readable
            - data-decryption-failed
            - data-decompression-failed
            - other
        errorMessage:
          description: ""
          type: string
          minLength: 3
        errorDateTime:
          description: ""
          type: string
          format: date-time
      required:
        - errorCode
        - errorMessage
        - errorDateTime
    subProcessNameType:
      description: Comment describing your JSON Schema
      type: string
      enum:
        - request
        - offer
        - feedback
        - conclusionDecision
      example: request
    subProcessStatusType:
      type: string
      enum:
        - Created
        - Received
        - InProgress
        - Responsed
        - Updated
        - Error
        - Inquiry
        - Inquiry_Answer
        - Closed
    processStatusType:
      type: string
      enum:
        - active
        - closed
      description: Defines status of the overall process.
    processIdType:
      type: string
      format: UUID
      description: UUID, that won't change during the offer processes. The UUID is set by the party, that starts the process.
    senderReceiverType:
      type: object
      additionalProperties: false
      properties:
        category:
          description: The category of the organisation
          enum:
            - broker
            - insurer
            - serviceprovider
          example: broker
          type: string
        id:
          description: The IDP number of the member's techUser. The IDP number of the eventReceiver
            can be determined through the /saf-receivers endpoint of the General API.
          examples:
            - IDP1239856
          minLength: 3
          type: string
      required:
        - category
        - id
    eventDataType:
      description: The event payload.
      type: object
      properties:
        payload:
          description: The base64 representation of the first g-zipped and then encrypted
            original payload. For encryption, the AES-GCM algorithm with a 256-bit key,
            a 96-bit initialization vector (IV), and a 128-bit authentication tag must be
            used.
          minLength: 3
          type: string
        payLoadSignature:
          description: Signature key of the signed payload, to verify by whom the encrypted
            message has been created
          minLength: 3
          type: string
        links:
          items:
            type: object
            properties:
              description:
                description: Description of the purpose of the link
                type: string
              href:
                description: the- encrypted URL that should be called, to receive additional
                  encrypted unstructured data, such as pdf, pictures, etc.
                example: https://services.test-myecohub.ch/offer/nlpi/{offerId}/{attachmentId}
                  (unencrypted example)
                minLength: 3
                type: string
              rel:
                description: The IG B2B Standard the links belongs to.
                example: offer-nlpi
                minLength: 3
                type: string
            required:
              - href
              - rel
            additionalProperties: false
          type: array
        encryptionKey:
          description: The encrypted AES key, which was used to symmetrically encrypt the
            transmitted data. The key must be encrypted with the public key of the eventReceiver
            using RSA with PKCS#1 v1.5 padding.
          minLength: 3
          type: string
        publicKeyVersion:
          description: The version of the public key that was used to encrypt the encryptionKey.
          minLength: 3
          type: string
        signatureKeyVersion:
          description: 'The version of the signature key, that was used to sign '
          minLength: 3
          type: string
      required:
        - payload
        - encryptionKey
        - publicKeyVersion
      additionalProperties: false
    cloudEvents:
      iddef:
        description: Identifies the event. Producers MUST ensure that source + id is unique
          for each distinct event. If a duplicate event is re-sent (e.g. due to a network
          error) it MAY have the same id. Consumers MAY assume that Events with identical
          source and id are duplicates.
        examples:
          - A234-1234-1234
        minLength: 1
        type: string
      sourcedef:
        description: Uniquely identifies the producer of the event. Must be globally unique,
          including across environments.
        examples:
          - http://www.myecohub.ch/iat/ecohub-processes
          - http://www.myecohub.ch/prod/ecohub-processes
        format: uri-reference
        minLength: 1
        type: string
      specversiondef:
        description: The version of the CloudEvents specification which the event uses. MUST
          be set to 1.0
        examples:
          - '1.0'
        minLength: 1
        type: string
      typedef:
        type: string
        minLength: 1
      datacontenttypedef:
        description: Content type of the data value. Must adhere to RFC 2046 format.
        examples:
          - text/xml
          - application/json
        minLength: 1
        type:
          - 'null'
          - string
      dataschemadef:
        description: Identifies the schema that data adheres to. Must point to the respective raw schema in
          the EcoHub GitHub schema repository (https://github.com/EcoHub-AG/Standards).
        format: uri
        minLength: 1
        type: string
        examples:
          - https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiRequestDataType.json
          - https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiDataType.json
      subjectdef:
        description: Describes the subject of the event to provide additional context about
          the event.
        examples:
          - Billing november 2024
          - MF offer company A
        minLength: 1
        type:
          - 'null'
          - string
      timedef:
        description: Timestamp of when the occurrence happened. Must adhere to RFC 3339.
        examples:
          - '2018-04-05T17:31:00Z'
        format: date-time
        minLength: 1
        type:
          - 'null'
          - string
    licenceKeyType:
      description: The license key for the requesting SC application.
      type: string
      maxLength: 200
      minLength: 3
      example: fdsaf346t54grthe65euz467jhz7r
    userAgentType:
      type: object
      description: Identifies the software that was used to produce the event
      properties:
        name:
          description: Name of the application
          example: Client software XYZ
          maxLength: 100
          minLength: 3
          type: string
        version:
          description: Used version of the application
          example: Version 1.0
          maxLength: 30
          minLength: 3
          type: string
      required:
        - name
        - version
      additionalProperties: false
    SAFKeyType:
      description: Format of the kafka message key
      type: object
      properties:
        processId:
          $ref: '#/components/schemas/processIdType'
      additionalProperties: false
      required:
        - processId
  messages:
    safEvent:
      name: safEvent
      title: None life personal insurance offer
      summary: Events that are used to request an offer, receive a offer, send feedback and accept a offer
      payload:
        $ref: '#/components/schemas/SAFEventType'
      bindings:
        kafka:
          key:
            $ref: '#/components/schemas/SAFKeyType'
          schemaIdLocation: 'payload'
          schemaIdPayloadEncoding: 'confluent'
          bindingVersion: '0.4.0'
      examples:
        - name: offerRequestExample
          summary: Example of an offerRequest event, initiated by an broker
          payload:
            id: 044d2e50-12d6-43e4-bb1b-7b54841c9c82
            source: http://www.myecohub.ch/ecoHub-mock-broker-producer1
            specversion: '1.0'
            type: data
            datacontenttype: application/json
            dataschema: https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiRequestDataType.json
            subject: offer nlpi request
            time: '2023-08-17T14:15:22.000Z'
            licenceKey: REcxZEVMZWV1UXFwOUZwaz...
            userAgent:
              name: BS1
              version: '1.0'
            eventReceiver:
              category: insurer
              id: IDP1234567
            eventSender:
              category: broker
              id: IDP7654321
            data:
              payload: V2UgZGlkbid0IGluY2x1ZGUgdGhlIGZ1bGwgcGF5bG9hZCBoZXJlIGZvciBicmV2aXR5LiBJZiBjb3Vyc2UsIGluIHRoZSByZWFsIHdvcmxkLCB0aGlzIHBheWxvYWQgd291bGQgYmUgaW52YWxpZCBvZiBjb3Vyc2UsIGFzIGl0IGRvZXMgbm90IGNvbXBseSB3aXRoIHRoZSBPZmZlciBOTFBJIHNjaGVtYS4gQnJvd255IHBvaW50cyB0byB5b3UgZm9yIGFjdHVhbGx5IGRlY29kaW5nIHRoZSBleGFtcGxlIDsp
              payloadSignature: MEYCIQD76gKbAynmvE5Ndq+Tnnf/aBziZlryXkP
              links:
                - href: 7F8C+RQDyYAIhAIjt+X0BXF0sWZYQUhzQaVElQptMEZjZiMVcXwUeL9ZJ
                  rel: offer-nlpi
                  description: Pdf file that contains additional informations for the offer.
              encryptionKey: urpx9D/0MwvQoCz3nNcQyMpEh2VEW6X7TiMmIfH...
              publicKeyVersion: '1.1'
              signatureKeyVersion: '1.3'
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            processStatus: active
            subProcessName: request
            subProcessStatus: Created
        - name: offerRequestReceivedExample
          summary: Example of an offerRequest received event, sent by the insurer
          payload:
            id: 3e921406-ee31-42e9-9a17-14c9e42cae21
            source: http://www.myecohub.ch/ecoHub-mock-insurer-producer1
            specversion: '1.0'
            type: data
            subject: offer nlpi request received
            time: '2023-08-17T14:15:22.000Z'
            licenceKey: 8985+9403*jgfksld94&%fjd
            userAgent:
              name: Insurer backoffice system 1
              version: '1.0'
            eventReceiver:
              category: broker
              id: IDP7654321
            eventSender:
              category: insurer
              id: IDP1234567
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            subProcessName: request
            processStatus: active
            subProcessStatus: Received
        - name: offerExample
          summary: Example of an offer event, sent by the insurer to the broker
          payload:
            id: d1ebd951-e44e-4464-939e-bd6f4c8d1d8e
            source: http://www.myecohub.ch/ecoHub-mock-insurer-producer1
            specversion: '1.0'
            type: data
            datacontenttype: application/json
            dataschema: https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiDataType.json
            subject: offer
            time: '2023-08-17T14:15:22.000Z'
            licenceKey: 8985+9403*jgfksld94&%fjd
            userAgent:
              name: Insurer backoffice system 1
              version: '1.0'
            eventSender:
              category: insurer
              id: IDP1234567
            eventReceiver:
              category: broker
              id: IDP7654321
            data:
              payload: V2UgZGlkbid0IGluY2x1ZGUgdGhlIGZ1bGwgcGF5bG9hZCBoZXJlIGZvciBicmV2aXR5LiBJZiBjb3Vyc2UsIGluIHRoZSByZWFsIHdvcmxkLCB0aGlzIHBheWxvYWQgd291bGQgYmUgaW52YWxpZCBvZiBjb3Vyc2UsIGFzIGl0IGRvZXMgbm90IGNvbXBseSB3aXRoIHRoZSBPZmZlciBOTFBJIHNjaGVtYS4gQnJvd255IHBvaW50cyB0byB5b3UgZm9yIGFjdHVhbGx5IGRlY29kaW5nIHRoZSBleGFtcGxlIDsp
              payloadSignature: MEYCIQD76gKbAynmvE5Ndq+Tnnf/aBziZlryXkP
              links:
                - href: 0BXF0sWZYQUhzQaVElQptMEZjZiMVcXwUeL9ZJ
                  rel: offer-nlpi
                  description: Pdf file that contains additional informations for the offer.
              encryptionKey: mfkaclou7z84z
              publicKeyVersion: '1.0'
              signatureKeyVersion: '1.1'
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            subProcessName: offer
            processStatus: active
            subProcessStatus: Created
        - name: offerReceivedExample
          summary: Example of an offer received event, sent by the broker
          payload:
            id: 1aa99947-59ee-4b75-86b2-33618d34dd32
            source: http://www.myecohub.ch/ecoHub-mock-broker-producer1
            specversion: '1.0'
            type: data
            subject: offer nlpi offer received
            time: '2023-08-17T14:15:22.000Z'
            licenceKey: REcxZEVMZWV1UXFwOUZwaz...
            userAgent:
              name: BS1
              version: '1.0'
            eventReceiver:
              category: insurer
              id: IDP1234567
            eventSender:
              category: broker
              id: IDP7654321
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            processStatus: active
            subProcessName: offer
            subProcessStatus: Received
        - name: offerFeedbackExample
          summary: Example of an offer feedback event, sent by the broker to the insurer
          payload:
            id: 1aa99947-59ee-4b75-86b2-33618d34dd32
            source: http://www.myecohub.ch/ecoHub-mock-broker-producer1
            specversion: '1.0'
            type: data
            datacontenttype: application/json
            dataschema: https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiFeedbackDataType.json
            subject: offer feedback
            time: '2023-08-17T14:15:22.000Z'
            licenceKey: REcxZEVMZWV1UXFwOUZwaz...
            userAgent:
              name: BS1
              version: '1.0'
            eventReceiver:
              category: insurer
              id: IDP1234567
            eventSender:
              category: broker
              id: IDP7654321
            data:
              payload: V2UgZGlkbid0IGluY2x1ZGUgdGhlIGZ1bGwgcGF5bG9hZCBoZXJlIGZvciBicmV2aXR5LiBJZiBjb3Vyc2UsIGluIHRoZSByZWFsIHdvcmxkLCB0aGlzIHBheWxvYWQgd291bGQgYmUgaW52YWxpZCBvZiBjb3Vyc2UsIGFzIGl0IGRvZXMgbm90IGNvbXBseSB3aXRoIHRoZSBPZmZlciBOTFBJIHNjaGVtYS4gQnJvd255IHBvaW50cyB0byB5b3UgZm9yIGFjdHVhbGx5IGRlY29kaW5nIHRoZSBleGFtcGxlIDsp
              payloadSignature: MEYCIQD76gKbAynmvE5Ndq+Tnnf/aBziZlryXkP
              links:
                - href: 7F8C+RQDyYAIhAIjt+X0BXF0sWZYQUhzQaVElQptMEZjZiMVcXwUeL9ZJ
                  rel: offer-nlpi
                  description: Pdf file that contains additional informations for the offer.
              encryptionKey: urpx9D/0MwvQoCz3nNcQyMpEh2VEW6X7TiMmIfH...
              publicKeyVersion: '1.1'
              signatureKeyVersion: '1.3'
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            processStatus: active
            subProcessName: feedback
            subProcessStatus: Created
        - name: offerFeedbackReceivedExample
          summary: Example of an offer feedback received event, sent by the insurer
          payload:
            id: 5df58bad-960c-4752-81f7-3a2721493b2c
            source: http://www.myecohub.ch/ecoHub-mock-insurer-producer1
            specversion: '1.0'
            type: data
            subject: offer nlpi feedback received
            time: '2023-08-17T14:15:22.000Z'
            licenceKey: 8985+9403*jgfksld94&%fjd
            userAgent:
              name: Insurer backoffice system 1
              version: '1.0'
            eventReceiver:
              category: broker
              id: IDP7654321
            eventSender:
              category: insurer
              id: IDP1234567
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            subProcessName: feedback
            processStatus: active
            subProcessStatus: Received
        - name: offerConclusionDecisionExample
          summary: Example of an offer conclusion decision event, sent by the insurer to the
            broker
          payload:
            id: 53198975-f2ed-48d7-ae5d-0ba5f8b1e95e
            source: http://www.myecohub.ch/ecoHub-mock-insurer-producer1
            specversion: '1.0'
            type: data
            datacontenttype: application/json
            dataschema: https://raw.githubusercontent.com/EcoHub-AG/Standards/refs/tags/Offer_NLPI_v0.3.0/schemas/Offer-NLPI/v0.3.0/offer-nlpi-root/OfferNlpiConclusionDecisionDataType.json
            subject: offer conclusion decision
            time: '2023-08-17T14:15:22.000Z'
            licenceKey: 8985+9403*jgfksld94&%fjd
            userAgent:
              name: Insurer backoffice system 1
              version: '1.0'
            eventSender:
              category: insurer
              id: IDP1234567
            eventReceiver:
              category: broker
              id: IDP7654321
            data:
              payload: V2UgZGlkbid0IGluY2x1ZGUgdGhlIGZ1bGwgcGF5bG9hZCBoZXJlIGZvciBicmV2aXR5LiBJZiBjb3Vyc2UsIGluIHRoZSByZWFsIHdvcmxkLCB0aGlzIHBheWxvYWQgd291bGQgYmUgaW52YWxpZCBvZiBjb3Vyc2UsIGFzIGl0IGRvZXMgbm90IGNvbXBseSB3aXRoIHRoZSBPZmZlciBOTFBJIHNjaGVtYS4gQnJvd255IHBvaW50cyB0byB5b3UgZm9yIGFjdHVhbGx5IGRlY29kaW5nIHRoZSBleGFtcGxlIDsp
              payloadSignature: MEYCIQD76gKbAynmvE5Ndq+Tnnf/aBziZlryXkP
              encryptionKey: mfkaclou7z84z
              publicKeyVersion: '1.0'
              signatureKeyVersion: '1.1'
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            subProcessName: conclusionDecision
            processStatus: active
            subProcessStatus: Created
        - name: offerConclusionDecisionReceivedExample
          summary: Example of an offer conclusion decision received event, sent by the broker
          payload:
            id: 1607aa76-4de4-417f-9e88-88bbb4b62f34
            source: http://www.myecohub.ch/ecoHub-mock-broker-producer1
            specversion: '1.0'
            type: data
            subject: offer nlpi conclusionDecision received
            time: '2023-08-17T14:15:22.000Z'
            licenceKey: REcxZEVMZWV1UXFwOUZwaz...
            userAgent:
              name: BS1
              version: '1.0'
            eventReceiver:
              category: insurer
              id: IDP1234567
            eventSender:
              category: broker
              id: IDP7654321
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            processStatus: closed
            subProcessName: conclusionDecision
            subProcessStatus: Received
    safInquiryEvent:
      name: safInquiryEvent
      title: None life personal insurance offer inquiry
      summary: Events that are used to create a inquiry for an offer and response to those
      bindings:
        kafka:
          key:
            $ref: '#/components/schemas/SAFKeyType'
          schemaIdLocation: 'payload'
          schemaIdPayloadEncoding: 'confluent'
          bindingVersion: '0.4.0'
      payload:
        $ref: '#/components/schemas/SAFInquiryEventType'
      examples:
        - name: nlpiOfferInquiryEvent
          summary: 'Example of an offer inquiry event, initiated by an broker'
          payload:
            id: 43737364-507d-4afd-964a-b5e04238be74
            source: 'http://www.myecohub.ch/ecoHub-mock-broker'
            specversion: 0.2.2
            licenceKey: 'mvikeporivmf/342)*fjdskaföj'
            userAgent:
              name: "BS1"
              version: "1.0"
            type: offer.nlpi.ktg
            datacontenttype: application/json
            dataschema: 'http://www.myecohub.ch'
            subject: offer nlpi offer inquiry received
            time: 2023-08-17T14:15:22.000Z
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            subProcessName: offer.inquiry
            processStatus: active
            subProcessStatus: Created
            eventReceiver:
              category: insurer
              id: insurer1
            eventSender:
              category: broker
              id: broker1
            data:
              message: SGVsbG8gd29ybGQh
              encryptionKey: jgfisogjeioüwgj
              publicKeyVersion: '1.1'
        - name: nlpiOfferInquiryReceivedEvent
          summary: 'Example of an offer inquiry received event, published by the insurer'
          payload:
            id: af73f7f5-61b8-401d-aad9-1d04fe72409c
            source: 'http://www.myecohub.ch/ecoHub-mock-insurer'
            specversion: 0.2.2
            licenceKey: '8985+9403*jgfksld94&%fjd'
            userAgent:
              name: "Insurer backoffice system 1"
              version: "1.0"
            type: offer.nlpi.ktg
            datacontenttype: application/json
            dataschema: 'http://www.myecohub.ch'
            subject: offer nlpi inquiry received
            time: 2023-08-17T14:15:22.000Z
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            subProcessName: offer.inquiry
            processStatus: active
            subProcessStatus: Received
            eventReceiver:
              category: broker
              id: broker1
            eventSender:
              category: insurer
              id: insurer1
        - name: nlpiOfferInquiryRespondedEvent
          summary: 'Example of an offer inquiry received event, published by the insurer'
          payload:
            id: 5970e6c5-d143-4689-a434-69de74b5253f
            source: 'http://www.myecohub.ch/ecoHub-mock-insurer'
            specversion: 0.2.2
            licenceKey: '8985+9403*jgfksld94&%fjd'
            userAgent:
              name: "Insurer backoffice system 1"
              version: "1.0"
            type: offer.nlpi.ktg
            datacontenttype: application/json
            dataschema: 'http://www.myecohub.ch'
            subject: offer nlpi conclusionDecision received
            time: 2023-08-17T14:15:22.000Z
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            subProcessName: offer.inquiry
            processStatus: active
            subProcessStatus: Responsed
            eventReceiver:
              category: broker
              id: broker1
            eventSender:
              category: insurer
              id: insurer1
            data:
              message: SGVsbG8gd29ybGQh
              encryptionKey: mfkaclou7z84z
              publicKeyVersion: '1.1'
        - name: nlpiOfferInquiryRespondedEvent
          summary: 'Example of an offer inquiry received event, published by the insurer'
          payload:
            id: 9f679ba0-a305-4ac7-839a-dc2d23068b7e
            source: 'http://www.myecohub.ch/ecoHub-mock-broker'
            specversion: 0.2.2
            licenceKey: 'mvikeporivmf/342)*fjdskaföj'
            userAgent:
              name: "BS1"
              version: "1.0"
            type: offer.nlpi.ktg
            datacontenttype: application/json
            dataschema: 'http://www.myecohub.ch'
            subject: offer nlpi conclusionDecision received
            time: 2023-08-17T14:15:22.000Z
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            subProcessName: offer.inquiry
            processStatus: active
            subProcessStatus: Received
            eventReceiver:
              category: insurer
              id: insurer1
            eventSender:
              category: broker
              id: broker1
        - name: nlpiOfferInquiryClosedEvent
          summary: 'Example of an offer inquiry closed event, published by the broker'
          payload:
            id: 2aa30a8d-1d83-4720-b45b-12f243d5b51c
            source: 'http://www.myecohub.ch/ecoHub-mock-broker'
            specversion: 0.2.2
            licenceKey: 'mvikeporivmf/342)*fjdskaföj'
            userAgent:
              name: "BS1"
              version: "1.0"
            type: offer.nlpi.ktg
            datacontenttype: application/json
            dataschema: 'http://www.myecohub.ch'
            subject: offer nlpi conclusionDecision received
            time: 2023-08-17T14:15:22.000Z
            processId: ff9275bf-5b35-492e-bdd2-c217e151d335
            processName: offer.nlpi
            subProcessName: offer.inquiry
            processStatus: active
            subProcessStatus: Closed
            eventReceiver:
              category: insurer
              id: insurer1
            eventSender:
              category: broker
              id: broker1
    safErrorEvent:
      name: safErrorEvent
      title: Technical saf error
      summary: Events that are used to send technical saf errors, i.e. errors that are unrelated to the transmitted business data.
      payload:
        $ref: '#/components/schemas/SAFErrorEventType'
      bindings:
        kafka:
          key:
            $ref: '#/components/schemas/SAFKeyType'
          schemaIdLocation: 'payload'
          schemaIdPayloadEncoding: 'confluent'
          bindingVersion: '0.4.0'
    offerNlpiErrorEvent:
      name: offerNlpiErrorEvent
      title: Offer NLPI business error
      summary: Events that are used to send business errors, i.e. errors that are related to the transmitted business data.
      payload:
        $ref: '#/components/schemas/OfferNLPIErrorEventType'
      bindings:
        kafka:
          key:
            $ref: '#/components/schemas/SAFKeyType'
          schemaIdLocation: 'payload'
          schemaIdPayloadEncoding: 'confluent'
          bindingVersion: '0.4.0'
  